[{"content":"The whiteboard behind this article is more than just colorful notes — it\u0026rsquo;s a map of the mental models that drive clean, scalable, and maintainable software systems. Let’s break down the core ideas and keywords captured in this visual brainstorm.\n🧠 Sub-Domains \u0026amp; Bounded Contexts Domain, Sub-Domain, Service Line of business, like Insurance, Banking, E-Commerce Visualized as logical boundaries for teams and services Inspired by Domain-Driven Design (DDD) “Design your system around business capabilities, not technical constraints.”\n🧱 Architectural Patterns Layered Architecture: DAO → Service → Controller Module / Component view Common design layers: Project Layer Objects / Classes Executable packaging: .JAR / .EXE / .ZIP ✍️ Design Patterns (GoF) Grouped by intent:\nStructural: Facade Decorator Adapter Behavioral: Strategy Observer Command Creational: Singleton Factory Builder Each of these has a purpose in object lifecycle, behavior injection, or structural abstraction.\n📐 SOLID Principles Each letter is a compass for clean design:\nS – Single Responsibility O – Open/Closed L – Liskov Substitution I – Interface Segregation D – Dependency Inversion And don’t forget the twin brother: DRY (Don’t Repeat Yourself).\n🛰️ Communication Styles REST, gRPC, GraphQL, WebSocket Pub/Sub, Push, Poll Emphasizes event-driven, asynchronous models in distributed systems ⚙️ Buzzwords \u0026amp; Practices From delivery to deployment:\n#ShiftLeft #TestFirst, #ContractFirst, #DesignFirst #PlatformEngineering #ZeroTrust, #Resilience, #Observability 🎯 Hashtags as Architecture Drivers A few standout philosophies and principles:\n#CompositionOverInheritance #LiftAndShift #KISS (Keep It Simple, Stupid) #DeferDecisions #AutomationIsProductivity #AnticorruptionLayer #BoundedContext #HexagonalArchitecture These tags aren’t just trending on dev Twitter — they’re real-world practices for making software less fragile and more adaptive.\n📌 TL;DR The whiteboard outlines an entire mental toolkit for system design:\nThink in domains, not just code Choose patterns and principles that solve business pain points Architect with change in mind — using SOLID, DDD, and event-driven paradigms Let #buzzwords like #DRY, #ShiftLeft, and #Resilience guide practical decisions, not dogma \u0026ldquo;Architecture is not about boxes and arrows. It\u0026rsquo;s about decisions and trade-offs.\u0026rdquo;\n– Norbert Jakubczak\n💬 Got questions about any of the keywords? Want a breakdown on one of the patterns or practices? Drop a comment below — let\u0026rsquo;s talk architecture.\n","permalink":"https://norbix.dev/posts/keywords/","summary":"A visual exploration of the core keywords and concepts in modern software architecture.","title":"Keywords in Software Architecture"},{"content":" Writing Go code that works is easy. Writing Go code that lasts? That takes practice.\nAfter working on production systems in Go for several years — across SaaS platforms, cloud-native backends, and developer tooling — I’ve collected a set of battle-tested best practices that have helped me write maintainable, clean, and scalable Go code.\n✅ 1. Keep it Simple Go is intentionally minimal — embrace it.\nAvoid over-engineering. Prefer composition over inheritance. Use plain interfaces and simple data structures. Don’t abstract too early — write the concrete code first. 🧱 2. Project Structure Matters Use a predictable layout:\n1 2 3 4 5 6 /cmd - entry points /internal - private packages /pkg - public, reusable packages /api - OpenAPI/proto definitions /config - config loading /scripts - helper scripts Stick to convention. Tools like golang-standards/project-layout are a great starting point — but adapt it to your team’s needs.\n🧪 3. Tests Are Not Optional Use table-driven tests Use testing, and only bring in libraries like testify if you really need them Keep unit tests fast and independent Use go test -cover to check coverage ✨ 4. Errors Are First-Class Citizens Always check errors — no exceptions. Wrap errors with context using fmt.Errorf(\u0026quot;failed to read config: %w\u0026quot;, err) For complex systems, consider using errors.Join or errors.Is/As for proper error handling. 📦 5. Use Interfaces at the Boundaries Keep interfaces small, and only expose them where needed:\n1 2 3 type Storer interface { Save(ctx context.Context, data Item) error } Don’t write interfaces for everything — only where mocking or substitution matters (e.g. storage, HTTP clients, etc.).\n🧰 6. Tooling Makes You Better Use go vet, staticcheck, and golangci-lint Automate formatting: gofmt, goimports Use go mod tidy to keep your dependencies clean Pin tool versions with a tools.go file 🔐 7. Secure By Default Always set timeouts on HTTP clients and servers Avoid leaking secrets in logs Validate all inputs — especially on the API boundary Use context.Context consistently and propagate it properly 🌐 8. Embrace the Go Ecosystem Use standard library wherever possible — it\u0026rsquo;s well-tested and fast Prefer established, well-maintained packages Read source code — Go makes it easy to learn from the best 🚀 9. Performance Matters (but correctness first) Profile with pprof Avoid allocations in tight loops Use channels, but don’t abuse goroutines Benchmark with go test -bench 🧠 10. Readability \u0026gt; Cleverness Your code will be read 10x more than it’s written.\n\u0026quot;Write code for humans, not machines.\u0026quot; Stick to idiomatic Go — use golangci-lint to enforce consistency, and always code with your teammates in mind.\n🙌 Conclusion Go is an incredible tool for building fast, reliable software — but like any tool, it shines brightest in the hands of developers who respect its philosophy: clarity, simplicity, and composability.\nWhat are your favorite Go best practices? Let me know on Twitter or GitHub @norbix!\n","permalink":"https://norbix.dev/posts/best-practices-4-software-development-in-go/","summary":"A collection of real-world Go best practices from years of building backend systems, APIs, and cloud-native services.","title":"Best Practices for Software Development in Go"},{"content":"This is a test page. This is a test page for the Hugo blog. It is used to verify the setup and configuration of the Hugo site. The content here is not meant to be permanent and will be replaced with actual blog posts in the future.\n","permalink":"https://norbix.dev/docs/test/","summary":"\u003ch1 id=\"this-is-a-test-page\"\u003eThis is a test page.\u003c/h1\u003e\n\u003cp\u003eThis is a test page for the Hugo blog. It is used to verify the setup and configuration of the Hugo site. The content here is not meant to be permanent and will be replaced with actual blog posts in the future.\u003c/p\u003e","title":"Test"},{"content":"Hi, I\u0026rsquo;m Norbert Jakubczak — aka Norbix 👋\nI\u0026rsquo;m a polyglot Software Engineer with a strong focus on Golang and Python, working across the full stack — from backend and cloud infrastructure to frontend integration and developer tooling.\nI specialize in building Internal Developer Platforms (IDPs) and architecting scalable Software-as-a-Service (SaaS) systems using microservices and modern cloud-native technologies.\n🛠️ Areas of Expertise 🐍 \u0026amp; 🦫 Polyglot systems in Python and Go 🧱 Internal Developer Platforms (IDP) 🧩 SaaS Microservices architecture ☁️ Kubernetes (K8s) and cloud-native platforms 🔐 DevSecOps and secure CI/CD pipelines ⚙️ Full lifecycle delivery: from analysis \u0026amp; architecture → development → deployment → production support ✍️ What this blog is about This blog is a logbook of my journey building and maintaining resilient systems — sharing both wins and war stories from the world of platform engineering, cloud automation, and product delivery.\nExpect deep dives on:\nGo/Python code patterns API and system design Developer experience (DevEx) best practices CI/CD orchestration Infrastructure-as-Code (IaC) Real code. Real lessons. Honest write-ups.\n🌍 Connect with me GitHub: @norbix Twitter: @norbixjakubczak Email: norbert.jakubczak@gmail.com Mobile: +48 885 259 225 Thanks for stopping by. I hope something here helps you build better systems.\n","permalink":"https://norbix.dev/about/","summary":"\u003cp\u003eHi, I\u0026rsquo;m \u003cstrong\u003eNorbert Jakubczak\u003c/strong\u003e — aka \u003cstrong\u003eNorbix\u003c/strong\u003e 👋\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m a polyglot \u003cstrong\u003eSoftware Engineer\u003c/strong\u003e with a strong focus on \u003cstrong\u003eGolang\u003c/strong\u003e and \u003cstrong\u003ePython\u003c/strong\u003e, working across the full stack — from backend and cloud infrastructure to frontend integration and developer tooling.\u003c/p\u003e\n\u003cp\u003eI specialize in building \u003cstrong\u003eInternal Developer Platforms (IDPs)\u003c/strong\u003e and architecting scalable \u003cstrong\u003eSoftware-as-a-Service (SaaS)\u003c/strong\u003e systems using microservices and modern cloud-native technologies.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-areas-of-expertise\"\u003e🛠️ Areas of Expertise\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e🐍 \u0026amp; 🦫 Polyglot systems in \u003cstrong\u003ePython\u003c/strong\u003e and \u003cstrong\u003eGo\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e🧱 \u003cstrong\u003eInternal Developer Platforms (IDP)\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e🧩 \u003cstrong\u003eSaaS Microservices\u003c/strong\u003e architecture\u003c/li\u003e\n\u003cli\u003e☁️ \u003cstrong\u003eKubernetes (K8s)\u003c/strong\u003e and cloud-native platforms\u003c/li\u003e\n\u003cli\u003e🔐 DevSecOps and secure CI/CD pipelines\u003c/li\u003e\n\u003cli\u003e⚙️ Full lifecycle delivery: from analysis \u0026amp; architecture → development → deployment → production support\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-what-this-blog-is-about\"\u003e✍️ What this blog is about\u003c/h2\u003e\n\u003cp\u003eThis blog is a logbook of my journey building and maintaining resilient systems — sharing both wins and war stories from the world of platform engineering, cloud automation, and product delivery.\u003c/p\u003e","title":"About"}]