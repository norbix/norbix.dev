<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Golang on norbix.dev - The log of my journey through code &amp; software systems architecture</title><link>https://norbix.dev/tags/golang/</link><description>Recent content in Golang on norbix.dev - The log of my journey through code &amp; software systems architecture</description><generator>Hugo -- 0.145.0</generator><language>en-us</language><lastBuildDate>Sat, 06 Sep 2025 12:00:00 +0200</lastBuildDate><atom:link href="https://norbix.dev/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Best Practices for Software Development in Go</title><link>https://norbix.dev/posts/best-practicies-4-software-development-in-go/</link><pubDate>Tue, 08 Apr 2025 19:10:10 +0200</pubDate><guid>https://norbix.dev/posts/best-practicies-4-software-development-in-go/</guid><description>A collection of real-world Go best practices from years of building backend systems, APIs, and cloud-native services.</description></item><item><title>GoF Design Patterns in Go: Practical Examples</title><link>https://norbix.dev/posts/design-patterns/</link><pubDate>Tue, 15 Apr 2025 12:43:02 +0200</pubDate><guid>https://norbix.dev/posts/design-patterns/</guid><description>Explore the 23 Gang of Four (GoF) design patterns in Go with clear explanations and code snippets, grouped into creational, structural, and behavioral categories.</description></item><item><title>DSA - Data Structures and Algorithms</title><link>https://norbix.dev/posts/algorithms-and-data-structures/</link><pubDate>Thu, 24 Jul 2025 18:10:25 +0200</pubDate><guid>https://norbix.dev/posts/algorithms-and-data-structures/</guid><description>A deep dive into Data Structures and Algorithms (DSA) using Go and its Python counterpart, covering essential concepts, implementations, and best practices.</description></item><item><title>Graph Theory Algorithms 4 Competitive Programming</title><link>https://norbix.dev/posts/graph-theory-algorithms-4-competitive-programming/</link><pubDate>Sat, 19 Apr 2025 15:34:33 +0200</pubDate><guid>https://norbix.dev/posts/graph-theory-algorithms-4-competitive-programming/</guid><description>A comprehensive guide to graph theory algorithms in Go, covering essential concepts, implementations, and best practices for competitive programming.</description></item><item><title>Concurrency in Go</title><link>https://norbix.dev/posts/concurrency-in-go/</link><pubDate>Sat, 19 Apr 2025 15:52:47 +0200</pubDate><guid>https://norbix.dev/posts/concurrency-in-go/</guid><description>A deep dive into concurrency in Go, covering goroutines, channels, and real-world patterns.</description></item><item><title>Demystifying Big-O Notation in Software Engineering</title><link>https://norbix.dev/posts/big-o-notation/</link><pubDate>Wed, 23 Apr 2025 10:00:00 +0200</pubDate><guid>https://norbix.dev/posts/big-o-notation/</guid><description>Understand Big-O notation through real-world Go examples and discover how algorithmic complexity impacts code scalability, performance, and design choices.</description></item><item><title>The Generic Protocol Pattern in Go: Designing Extensible CLI Interfaces</title><link>https://norbix.dev/posts/generic-protocol-pattern-in-go/</link><pubDate>Tue, 24 Jun 2025 12:00:00 +0200</pubDate><guid>https://norbix.dev/posts/generic-protocol-pattern-in-go/</guid><description>Learn how to implement a flexible and extensible protocol pattern in Go for building structured CLI interfaces and stream-based IPC communication.</description></item><item><title>Architectural Patterns in Go: MVC, Hexagonal, CQRS, and Microservices</title><link>https://norbix.dev/posts/architectural-patterns/</link><pubDate>Sat, 06 Sep 2025 12:00:00 +0200</pubDate><guid>https://norbix.dev/posts/architectural-patterns/</guid><description>Understand the difference between design patterns and architectural patterns. Explore how MVC, Hexagonal, CQRS, and Microservices can be applied in Go projects with practical insights and examples.</description></item></channel></rss>