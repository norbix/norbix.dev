<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Go on norbix.dev - The log of my journey through code &amp; software systems architecture</title><link>https://norbix.dev/categories/go/</link><description>Recent content in Go on norbix.dev - The log of my journey through code &amp; software systems architecture</description><generator>Hugo -- 0.145.0</generator><language>en-us</language><lastBuildDate>Tue, 24 Jun 2025 12:00:00 +0200</lastBuildDate><atom:link href="https://norbix.dev/categories/go/index.xml" rel="self" type="application/rss+xml"/><item><title>GoF Design Patterns in Go: Practical Examples</title><link>https://norbix.dev/posts/design-patterns/</link><pubDate>Tue, 15 Apr 2025 12:43:02 +0200</pubDate><guid>https://norbix.dev/posts/design-patterns/</guid><description>Explore the 23 Gang of Four (GoF) design patterns in Go with clear explanations and code snippets, grouped into creational, structural, and behavioral categories.</description></item><item><title>The Generic Protocol Pattern in Go: Designing Extensible CLI Interfaces</title><link>https://norbix.dev/posts/generic-protocol-pattern-in-go/</link><pubDate>Tue, 24 Jun 2025 12:00:00 +0200</pubDate><guid>https://norbix.dev/posts/generic-protocol-pattern-in-go/</guid><description>Learn how to implement a flexible and extensible protocol pattern in Go for building structured CLI interfaces and stream-based IPC communication.</description></item></channel></rss>