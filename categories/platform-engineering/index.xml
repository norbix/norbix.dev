<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Platform-Engineering on norbix.dev - The log of my journey through code &amp; software systems architecture</title><link>https://norbix.dev/categories/platform-engineering/</link><description>Recent content in Platform-Engineering on norbix.dev - The log of my journey through code &amp; software systems architecture</description><generator>Hugo -- 0.145.0</generator><language>en-us</language><lastBuildDate>Tue, 07 Oct 2025 10:00:00 +0200</lastBuildDate><atom:link href="https://norbix.dev/categories/platform-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>Engineering for Reliability: What SRE Is Really About</title><link>https://norbix.dev/posts/site-reliability-engineering/</link><pubDate>Tue, 22 Apr 2025 12:00:00 +0200</pubDate><guid>https://norbix.dev/posts/site-reliability-engineering/</guid><description>An in-depth look into Site Reliability Engineering (SRE): its core principles, how it&amp;rsquo;s different from DevOps, and how teams can adopt SRE to build reliable, scalable systems.</description></item><item><title>Platform Engineering: The DevOps You Productize</title><link>https://norbix.dev/posts/platform-engineering/</link><pubDate>Tue, 22 Apr 2025 16:00:00 +0200</pubDate><guid>https://norbix.dev/posts/platform-engineering/</guid><description>What is Platform Engineering? How is it different from DevOps or SRE? This article unpacks the role of platform teams, why they&amp;rsquo;re critical in modern software delivery, and how they bring together cloud, automation, and developer experience.</description></item><item><title>Kubernetes Operators in Go</title><link>https://norbix.dev/posts/kubernetes-operators-in-go/</link><pubDate>Tue, 07 Oct 2025 10:00:00 +0200</pubDate><guid>https://norbix.dev/posts/kubernetes-operators-in-go/</guid><description>Learn how to build and understand Kubernetes Operators in Go â€” from controllers and reconciliation loops to the Operator SDK.</description></item></channel></rss>